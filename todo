#!/usr/bin/env python3
"""
Simple To-Do List Manager
-------------------------
A command-line tool for adding, viewing, and completing tasks.
Stores data in a local JSON file.
"""

import json
import os
from datetime import datetime

DATA_FILE = "tasks.json"


class Task:
    """Represents a single to-do task."""

    def __init__(self, title: str, due_date: str = None):
        self.title = title
        self.completed = False
        self.created_at = datetime.now().isoformat()
        self.due_date = due_date

    def complete(self):
        """Mark task as completed."""
        self.completed = True

    def to_dict(self) -> dict:
        """Convert task to dictionary for JSON serialization."""
        return {
            "title": self.title,
            "completed": self.completed,
            "created_at": self.created_at,
            "due_date": self.due_date,
        }

    @staticmethod
    def from_dict(data: dict):
        """Create Task from dictionary."""
        task = Task(data["title"], data.get("due_date"))
        task.completed = data.get("completed", False)
        task.created_at = data.get("created_at", datetime.now().isoformat())
        return task


class ToDoList:
    """A list of tasks with methods to manage them."""

    def __init__(self, filename: str):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self) -> list:
        """Load tasks from JSON file."""
        if not os.path.exists(self.filename):
            return []
        with open(self.filename, "r", encoding="utf-8") as f:
            data = json.load(f)
        return [Task.from_dict(item) for item in data]

    def save_tasks(self):
        """Save tasks to JSON file."""
        with open(self.filename, "w", encoding="utf-8") as f:
            json.dump([task.to_dict() for task in self.tasks], f, indent=4)

    def add_task(self, title: str, due_date: str = None):
        """Add a new task to the list."""
        self.tasks.append(Task(title, due_date))
        self.save_tasks()

    def list_tasks(self):
        """Print all tasks with status."""
        if not self.tasks:
            print("No tasks found.")
            return
        for i, task in enumerate(self.tasks, start=1):
            status = "✓" if task.completed else "✗"
            due = f" (due: {task.due_date})" if task.due_date else ""
            print(f"{i}. [{status}] {task.title}{due}")

    def complete_task(self, index: int):
        """Mark a task as completed."""
        if 0 <= index < len(self.tasks):
            self.tasks[index].complete()
            self.save_tasks()
        else:
            print("Invalid task number.")


def main():
    todo = ToDoList(DATA_FILE)

    while True:
        print("\n--- To-Do List ---")
        print("1. View tasks")
        print("2. Add task")
        print("3. Complete task")
        print("4. Exit")

        choice = input("Choose an option: ").strip()

        if choice == "1":
            todo.list_tasks()
        elif choice == "2":
            title = input("Task title: ").strip()
            due_date = input("Due date (optional, YYYY-MM-DD): ").strip() or None
            todo.add_task(title, due_date)
            print("Task added.")
        elif choice == "3":
            todo.list_tasks()
            try:
                idx = int(input("Task number to complete: ")) - 1
                todo.complete_task(idx)
                print("Task completed.")
            except ValueError:
                print("Please enter a valid number.")
        elif choice == "4":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
